import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import useSWR, { SWRConfig } from 'swr'
import Script from 'next/script'

const fetcher = (...args) => fetch(...args).then(res => res.json())

const Delay = () => {
  const url = 'https://api.tzkt.io/v1/accounts/tz1iU8MyJN2xdbcz3CooENLEXaPw2wZLk6EF/operations?type=transaction,reveal&lastId=248217089&limit=40&sort=1&quote=usd';
  const { data: page1 } = useSWR(url, fetcher)

  const { data: operations } = useSWR('https://api.better-call.dev/v1/contract/mainnet/KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe/operations?with_storage_diff=false', fetcher)
  const { data: revealOperations } = useSWR('https://api.tzkt.io/v1/accounts/KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe/operations?type=origination,transaction&limit=1000&sort=1&quote=usd', fetcher)


  if(!operations || !revealOperations) {
    return <h2>Delay</h2>;
  }

  const lastOp = operations.operations.filter(op => op.entrypoint === 'reveal')[0];
  const lastTokenId = lastOp.parameters[0].children.find(({name}) => name ==='token_id').value
  console.log(lastOp);
  console.log(lastTokenId)

  console.log(revealOperations);
  const operationUnboxing = revealOperations.filter(op => op.parameter.entrypoint === "assignMetadata" && op.parameter.value === lastTokenId)[0];
  console.log(operationUnboxing);
  const ownerAddress = operationUnboxing.sender.address;
  const revealDateTime = new Date(operationUnboxing.timestamp).toLocaleString();

  return ( 
  <h2>
    <div>Last assign : {lastTokenId}</div>
    <div>Unboxing asked at : {revealDateTime}</div>
  </h2>
  )
}

const Dogs = () => {
  const url = 'https://api.better-call.dev/v1/contract/mainnet/KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe/operations?with_storage_diff=false';
  const { data: page1 } = useSWR(url, fetcher)
  const { data: page2 } = useSWR(() => url + '&last_id=' +  page1.last_id, fetcher)

  if(!page2) {
    return <div>loading</div>;
  }

  const operations = [...page1.operations, ...page2.operations]

  const hashReveal = operations.filter(op => op.entrypoint === 'reveal').map(op => op.hash);
   
  const dogs = hashReveal.map(hash => <Dog key={hash} hash={hash}/>)

  return  (
    <>
    {dogs}
    </>
    )
}

const Dog = ({hash}) => {
  const url = `https://api.better-call.dev/v1/opg/${hash}?with_mempool=false`
  const { data, error } = useSWR(url, fetcher)

  if(!data) {
    return <div className={styles.card}>loading</div>;
  }

  const reveal = data.find(({entrypoint}) => entrypoint === 'reveal');
  const parameters = reveal.parameters;
  const revealDateTime = new Date(reveal.timestamp).toLocaleString();
  const metadata = parameters[0].children.find(({name}) => name ==='metadata');
  const tokenId = parameters[0].children.find(({name}) => name ==='token_id').value;
  const dogUrlMarketplace = `https://marketplace.dogami.com/dog/${tokenId}`

  const attributes = metadata.children.find(({name}) => name ==='attributes').children;
  const rarityScore = attributes.find(({name}) => name ==='n').value;
  const sexe = attributes.find(({name}) => name ==='h').value;


  const artifactUri = metadata.children.find(({name}) => name ==='artifactUri').value;
  const hashIpfs = artifactUri.replace('ipfs://','');
  const displayArtifactUri = `https://nft-zzz.mypinata.cloud/ipfs/${hashIpfs}`

return (

  <div className={styles.card}>
    <model-viewer alt="dog" 
      src={displayArtifactUri} 
      ar ar-modes="webxr scene-viewer quick-look" 
      seamless-poster shadow-intensity="1"
      camera-controls enable-pan
      className={styles.modelViewer}>
    </model-viewer>
    <div className={styles.cardInfo}>
      <a href={dogUrlMarketplace}>{dogUrlMarketplace}</a>
      <div>{sexe}</div>
      <div>RS : {rarityScore}</div>
      <div>{revealDateTime}</div>
    </div>
  </div>
  )
}

export default function Home() {
 
  
  return (
    <>
    <Script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js" />
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <SWRConfig 
                value={{
                  refreshInterval: 15000,
                  fetcher: (resource, init) => fetch(resource, init).then(res => res.json())
                }}
        >
        <main className={styles.main}>
          <h1 className={styles.title}>
            DogaReveal
          </h1>
          <Delay/>

          <div className={styles.grid}>
              <Dogs/>
          </div>
        </main>
        </SWRConfig>
     
        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{' '}
            <span className={styles.logo}>
              <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
            </span>
          </a>
        </footer>
      </div>
    </>
  )
}
